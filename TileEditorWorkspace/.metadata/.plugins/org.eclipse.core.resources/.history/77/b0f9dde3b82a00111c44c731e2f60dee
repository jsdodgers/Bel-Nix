//import LinkedList.Node;

// Stack.java
//
// ICS 22 / CSE 22 Fall 2010
// Project #3: What's Simple Is True
//
// This Stack class is generic, in the same sense that our LinkedList class
// in the previous project was generic.  Different stacks can store different
// kinds of elements.  For example:
//
//     Stack<String> s = new Stack<String>();
//     s.push("Alex");
//
//     Stack<Integer> s = new Stack<Integer>();
//     s.push(9);
//
// You are required to implement your Stack as a linked list.  I suggest
// using your LinkedList<E> class from the previous project, if you completed
// it.  It should not be evident outside of this class that the stack is
// implemented as a linked list, though; this is a private implementation
// detail.


public class Stack<E>
{

	private static class Node<E>
	{
		public E data;
		public Node<E> next;
		
		public Node(E data, Node<E> next)
		{
			this.data = data;
			this.next = next;
		}
	}


	// a reference to the first node in the list (null if the list is empty)
	private Node<E> head;

	// the number of elements in the list
	private int count;
	
	
	// The constructor initializes the stack to be empty.
	public Stack()
	{
		head = null;
		count = 0;
	}
	

	// push() takes an element of the appropriate type and pushes it on to
	// the stack.
	public void push(E e)
	{
		Node<E> t = head;
		head = new Node<E>(e,t);
		count++;
	}


	// pop() removes the element at the top of the stack.  If the stack is
	// empty, there are no elements to be removed, so a StackEmptyException
	// is thrown instead.
	public void pop()
	throws StackEmptyException
	{
		if (isEmpty()) throw new StackEmptyException();
		else {
			Node<E> t = head.next;
			head.next = null;
			head = t;
		}
	}


	// top() returns the element at the top of the stack without removing it.
	// If the stack is empty, there is no element to be returned, so a
	// StackEmptyException is thrown instead.
	public E top()
	throws StackEmptyException
	{
		if (isEmpty()) throw new StackEmptyException();
		else {
			return head.data;
		}
	}


	// isEmpty() returns true if the stack is empty and false if it's not.
	public boolean isEmpty()
	{
		return count==0;
	}
}
