import java.util.ArrayList;


public class Problems {
	
	static int maxMod = 1000000007;
	
	
	
	
	public static void main(String[] args) {
		long a = 10000000;
		long b = a;
		a*=a;
		System.out.println(a+b + "  " + (a*10+b));
		System.out.println(combin(5,2));
		System.out.println(combin(6,1));
		System.out.println(combin(7,3));
		System.out.println(combin(5,3));
		System.out.println(combin(6,5));
		System.out.println(combin(7,4));
		System.out.println(problem1(1));
	}
	
	
	public static boolean isSquare(int n) {
		double sqrt = Math.sqrt((double)n);
		double top = Math.ceil(sqrt);
		double bottom = Math.floor(sqrt);
		return top==bottom;
	}
	
	public static int problem1(int max) {
		ArrayList<Point> used = new ArrayList<Point>();
		
		for (int n=1;n<=max;n++) {
			if (isSquare(n)) {
				ArrayList<Point> newUsed = new ArrayList<Point>();
				ArrayList<Point> newUsed2 = new ArrayList<Point>();
				for (int m=1; m<n;m++) {
					if (isSquare(m) && isSquare(n+m)) {
						long numPaths = combin(n+m,m);
						for (Point p : used) {
							if (p.x<=m && p.y<=n) {// && p.y>=p.x) {
								numPaths-=p.num;
							}
						}
/*						for (Point p : newUsed) {
							numPaths -= p.num;
						}*/
						while (numPaths<0) numPaths+=maxMod;
						Point p1 = new Point(m,n,numPaths);
						Point p2 = new Point(n,m,numPaths);
						used.add(p1);
						used.add(p2);
						newUsed.add(p1);
						newUsed2.add(p2);
						
					}
				}
				if (n==max || (isSquare(n) && isSquare(n+n))) {
					long numPaths = combin(n+n,n);
					for (Point p : used) {
						numPaths -= p.num;
					}
					while (numPaths<0) numPaths+=maxMod;
					if (n==max) return (int)numPaths;
					else used.add(new Point(n,n,numPaths));
				}
			}
		}
		
		
		return 0;
	}
	
	
	public static int combin(int num, int chose) {
		int chose1 = Math.max(chose, num-chose);
		int chose2 = Math.min(chose, num-chose);
		long mod = factMod(chose1,num,maxMod);
		long modBottom = factMod(0,chose2,maxMod);
		return (int)((mod/modBottom)%maxMod);
		
	}
	
	
	public static long factMod(int start, int end, int mod) {
		long ans = 1;
		for (int n=start+1;n<=end;n++) {
			ans*=n;
			ans%=mod;
		}
		return ans;
	}
	
	
	public static long divMod(long a,int b,int m)
	{
	  if(b==0) return 1;
	  else if(b%2==0) return divMod(a*a%m,b/2,m);
	  else return divMod(a,b-1,m)*a%m;
	}
	

	
	
}




class Point {
	public int x;
	public int y;
	public long num;
	
	public Point(int x1, int y1, long num1) {
		x = x1;
		y = y1;
		num = num1;
	}
}
