import java.util.*;


public class IEEEXtreme2013 {

	public void acadox () {
		Scanner s = new Scanner(System.in);
		while (s.hasNextLine()) {
			String s2 = s.nextLine();
			if (!parseLine(s2)) {
				System.out.println("ERROR");
			}
		}
	}
	
	public boolean parseLine(String s) {
		Scanner s2 = new Scanner(s);
		Stack<String> sa = new Stack<String>();
//		ArrayList<String> sa = new ArrayList<String>();
		while (s2.hasNext()) {
	//		sa.add(s2.next());
			String curr = s2.next();
		//	System.out.println(curr);
			if (isOp(curr)) {
				String st1;
				String st2 = "";
				if (sa.empty()) return false;
				st1 = sa.pop();
				if (curr.charAt(0)!='~') {
					if (sa.empty()) return false;
					st2 = sa.pop();
				}
				sa.push(doCalculation(curr.charAt(0),st2,st1));
			}
			else {
				sa.push(curr);
			}
		}
		if (!sa.empty()) {
			String ans = sa.pop();
			if (!sa.empty()) return false;
			System.out.println(ans);
		}
		return true;
		
/*		String st1;
		String st2;
		String st3;
		if (s2.hasNext()) st1 = s2.next();
		else return false;
		int ops = 0;
		while (s2.hasNext()) {
			ops++;
			if (s2.hasNext()) st2 = s2.next();
			else return false;
			if (s2.hasNext()) st3 = s2.next();
			else return false;
			if (!isHex(4,st1)) return false;
			if (!isHex(4,st2)) return false;
			if (!isOp(st3)) return false;
			st1 = doCalculation(st3.charAt(0),st1,st2);
		}
		if (ops > 20) return false;
		System.out.println(st1);
		return true;*/
	}
	
	public String doCalculation(char op, String first, String second) {
		if (op=='+') {
			int one = hexToInt(first);
			int two = hexToInt(second);
			String ans = intToHex(one+two);
			return ans.toUpperCase();
//			System.out.println(ans.toUpperCase());
		}
		else if (op=='-') {
			int one = hexToInt(first);
			int two = hexToInt(second);
			String ans = intToHex(one-two);
			return ans.toUpperCase();
	//		System.out.println(ans.toUpperCase());
		}
		else {
			String bin1 = hexToBinary(first);
			String bin2 = "";
			if (op!='~') {
				bin2 = hexToBinary(second);
				while (bin2.length()<bin1.length()) bin2 = "0".concat(bin2);
				while (bin1.length()<bin2.length()) bin1 = "0".concat(bin1);
			}
			else {
				bin1 = hexToBinary(second);
			}
			if (op=='&') {
				String ans = "";
				for (int n=0;n<bin1.length();n++) {
					char one = bin1.charAt(n);
					char two = bin2.charAt(n);
					if (one=='1' && two=='1') {
						ans = ans.concat("1");
					}
					else {
						ans = ans.concat("0");
					}
				}
				return binaryToHex(ans).toUpperCase();
//				System.out.println(binaryToHex(ans).toUpperCase());
			}
			if (op=='|') {
				String ans = "";
				for (int n=0;n<bin1.length();n++) {
					char one = bin1.charAt(n);
					char two = bin2.charAt(n);
					if (one=='1' || two=='1') {
						ans = ans.concat("1");
					}
					else {
						ans = ans.concat("0");
					}
				}
				return binaryToHex(ans).toUpperCase();
//				System.out.println(binaryToHex(ans).toUpperCase());
			}
			if (op=='~') {
				String ans = "";
				while (bin1.length()<16) {
					bin1 = "0".concat(bin1);
				}
				for (int n=0;n<bin1.length();n++) {
					char one = bin1.charAt(n);
			//		char two = bin2.charAt(n);
					if (one=='0') {
						ans = ans.concat("1");
					}
					else {
						ans = ans.concat("0");
					}
				}
				return binaryToHex(ans).toUpperCase();
//				System.out.println(binaryToHex(ans).toUpperCase());
			}
			if (op=='X') {
				String ans = "";
				for (int n=0;n<bin1.length();n++) {
					char one = bin1.charAt(n);
					char two = bin2.charAt(n);
					if ((one=='1' && two=='0') || (one=='0' && two=='1')) {
						ans = ans.concat("1");
					}
					else {
						ans = ans.concat("0");
					}
				}
				return binaryToHex(ans).toUpperCase();
//				System.out.println(binaryToHex(ans).toUpperCase());
			}
		}
		return "";
	}
	
	public boolean isHex(int length, String str) {
		if (str.length() <=0 || str.length() > length) return false;
		for (int n=0;n<str.length();n++) {
			int curr = (int)str.charAt(n);
			if (curr >=(int)'0' && curr <= (int)'9') continue;
			if (curr >=(int)'a' && curr <= (int)'f') continue;
			if (curr >=(int)'A' && curr <= (int)'F') continue;
			return false;
		}
		return true;
	}
	
	public boolean isOp(String str) {
		if (str.length()!=1) return false;
		return (str.charAt(0)=='+' || str.charAt(0)=='-' || str.charAt(0)=='&' || str.charAt(0)=='|' || str.charAt(0)=='~' || str.charAt(0)=='X');
	}
	
	
	public int hexToInt(String hex) {
		int hexInt = 0;
		for (int n=0;n<hex.length();n++) {
			hexInt*=16;
			hexInt+=hexCharToInt(hex.charAt(n));
		}
		return hexInt;
	}
	
	public int hexCharToInt(char hex) {
		char[] hex1 = new char[]{'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','a','b','c','d','e','f'};
		for (int n=0;n<hex1.length;n++) {
			if (hex1[n]==hex) {
				if (n>15) return n-6;
				else return n;
			}
		}
		return -1;		
	}
	
	public String hexToBinary(String hex) {
		String s = "";
		for (int n=0;n<hex.length();n++) {
			s = s.concat(hexCharToBinary(hex.charAt(n)));
		}
		return s;
	}
	
	public String hexCharToBinary(char hex) {
		String[] hex1 = new String[]{"0000","0001","0010","0011","0100","0101","0110","0111","1000","1001","1010","1011","1100","1101","1110","1111"};
		return hex1[hexCharToInt(hex)];
	}
	
	public String binaryToHex(String binary) {
		String s = "";
		String[] hex1 = new String[]{"0000","0001","0010","0011","0100","0101","0110","0111","1000","1001","1010","1011","1100","1101","1110","1111"};
		for (int n=0;n<binary.length()/4;n++) {
			String curr = binary.substring(n*4, n*4+4);
			for (int m=0;m<hex1.length;m++) {
				if (curr.equals(hex1[m])) {
					s = s.concat(Integer.toHexString(m));
				}
			}
		}
		while (s.length()<4) s = "0".concat(s);
		return s;
	}
	
	public String intToHex(int num) {
		if (num < 0) return "0000";
		String str = Integer.toHexString(num);
		if (str.length() > 4) return "FFFF";
		while (str.length()<4) str = "0".concat(str);
		return str;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public void problem_as() {
		
	}
	
}
